---
import Burger from "./Burger.astro";

type Urltype = "#" | "/";

interface Url {
  type: Urltype;
  content: string;
}

interface Props {
  links: Url[];
}

const { links } = Astro.props;
---

<header
  id="header"
  class="lg:w-[55rem] max-w-full lg:mx-auto lg:sticky fixed right-4 left-4 top-4 z-10 lg:block flex flex-col items-end">
  <Burger />
  <nav id="navigation" class="relative mt-4 flex flex-col lg:flex-row lg:justify-between lg:items-center w-fit gap-7 lg:px-4 px-8 py-4 rounded-xl items-center">
    {
      links.map((link: Url) => {
        return (
          <a
            class="menu-item lg:hover:drop-shadow-glow lg:hover:text-[--accent-color] transition-all text-xl capitalize"
            href={`${link.type}${link.content}`}
          >
            {link.content}
          </a>
        );
      })
    }
  </nav>
</header>

<script>
  const header = document.getElementById('header');
  const menu = document.getElementById('navigation');
  const menuItems = document.getElementsByClassName('menu-item');
  let width = window.innerWidth;

  const menuHandler = () => {
    if(width >= 1024 && window.scrollY === 0){
      header?.classList.remove("scroll-bg");
    } else {
      header?.classList.add("scroll-bg");
    }
  }

  window.addEventListener('scroll', menuHandler);
  menuHandler();

  window.addEventListener("resize", () => {
    width = window.innerWidth;
    menuHandler();

    if (width >= 1024) {
      menu!.classList.remove("hidden");
    } else {
      menu!.classList.add("hidden");
    }
  });

  if ( width < 1024) {
    menu!.classList.add("hidden");
    for (let i = 0; i < menuItems.length; i++) {
      menuItems[i].addEventListener("click", () => {
        menu!.classList.add("hidden");
      });
    }
  }
</script>
